{"version":3,"file":"static/js/130.04464b6e.chunk.js","mappings":"8MAEaA,EAAaC,EAAAA,GAAAA,KAAAA,OAAkB,kBAAuB,CACjEC,aAD0C,EAAGC,aAAH,GAAlBF,CAAH,qLCAVG,EAAcH,EAAAA,GAAAA,MAAH,sJASXI,EAAcJ,EAAAA,GAAAA,MAAAA,OAAmB,kBAAkB,CAC9DK,UAAU,EACVC,UAF4C,EAAEA,UAAF,GAAnBN,CAAH,k/B,SCRXO,EAAQ,SAAC,GAA0D,IAAD,IAAvDC,KAAAA,OAAuD,MAAhD,GAAgD,EAA5CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAON,EAAgB,EAAhBA,UAC7D,OACE,UAACH,EAAD,WACGK,GACD,SAACJ,EAAD,CACEK,KAAMA,EACNC,KAAMA,EACNC,QAASA,EACTC,MAAOA,EACPN,UAAWA,MAIlB,ECXYO,EAAO,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,SAAUd,EAAmB,EAAnBA,aAE/Ce,EAWEH,EAXFG,MACAC,EAUEJ,EAVFI,MACAC,EASEL,EATFK,MACAC,EAQEN,EARFM,SACAC,EAOEP,EAPFO,OACAC,EAMER,EANFQ,MACAC,EAKET,EALFS,MACAC,EAIEV,EAJFU,MACAC,EAGEX,EAHFW,SACAC,EAEEZ,EAFFY,OACAC,EACEb,EADFa,WAEF,OACE,UAAC5B,EAAD,CAAYiB,SAAUA,EAAUd,aAAcA,EAA9C,WACE,SAACK,EAAD,CACEC,KAAMS,EACNR,KAAMS,EACNR,KAAMS,EACNR,QAASS,EACTR,MAAOS,EACPf,WAAW,KAEb,SAACC,EAAD,CACEC,KAAMc,EACNb,KAAMc,EACNb,KAAMc,EACNb,QAASc,EACTb,MAAOc,IAERX,IACC,SAACR,EAAD,CACEC,KAAMO,EAAQP,KACdC,KAAMM,EAAQN,KACdC,KAAMK,EAAQL,KACdC,QAASI,EAAQJ,QACjBC,MAAOG,EAAQH,SAGnB,SAACgB,EAAA,EAAD,UAASD,MAGd,C,yEC7CKb,EAAU,CACdG,MAAO,QACPC,MAAO,QACPC,MAAO,aACPC,SACE,mFACFC,OAAQ,wBACRC,MAAO,WACPC,MAAO,WACPC,MAAO,gBACPC,SAAU,eACVC,OACE,4KACFC,WAAY,SAwBd,UArBkB,WAChB,IAAME,GAAWC,EAAAA,EAAAA,MAajB,OACE,2BACE,SAAC,IAAD,CAAMhB,QAASA,EAASE,SAbP,SAAAe,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfL,GACEM,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAKI,SAASC,WAAWC,MAChCC,SAAUP,EAAKI,SAASI,cAAcF,SAG1CN,EAAKS,OACN,EAGmDxC,aAAa,QAGlE,C","sources":["components/Form/Form.styled.js","components/Input/Input.styled.js","components/Input/Input.jsx","components/Form/Form.jsx","pages/LoginView.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormStyled = styled.form.attrs(({ autoComplete }) => ({\n  autocomplete: autoComplete,\n}))`\n  width: 30vw;\n  padding: 20px 10px;\n  display: inline-flex;\n  gap: 30px;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n","import styled from 'styled-components';\n\nexport const LabelStyled = styled.label`\n  display: flex;\n  flex-direction: column;\n  line-height: 35px;\n  font-size: 24px;\n  color: #e0cccc;\n  cursor: pointer;\n`;\n\nexport const InputStyled = styled.input.attrs(({autoFocus}) => ({\n  required: true,\n  autoFocus,\n}))`\n  width: 95%;\n  padding: 7px 15px;\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n  box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.75);\n  -webkit-box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.75);\n  font-size: 18px;\n  line-height: 25px;\n  background-color: #142a40;\n  color: #e0cccc;\n  &:focus {\n    border: none;\n    outline: none;\n    box-shadow: 0px 0px 4px 0px rgba(0, 0, 0, 0.75) inset;\n    -webkit-box-shadow: 0px 0px 4px 0px rgba(0, 0, 0, 0.75) inset;\n    -moz-box-shadow: 0px 0px 4px 0px rgba(0, 0, 0, 0.75) inset;\n  }\n  &:valid {\n    box-shadow: 0px 0px 8px 0px rgb(30, 210, 141);\n    -webkit-box-shadow: 0px 0px 8px 0px rgb(30, 210, 141);\n    -moz-box-shadow: 0px 0px 8px 0px rgb(30, 210, 141);\n  }\n  &:focus:invalid {\n    box-shadow: 0px 0px 8px 0px rgb(210, 57, 30);\n    -webkit-box-shadow: 0px 0px 8px 0px rgb(210, 57, 30);\n    -moz-box-shadow: 0px 0px 8px 0px rgb(210, 57, 30);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { LabelStyled, InputStyled } from './Input.styled';\n\nexport const Input = ({ text = '', type, name, pattern, title, autoFocus }) => {\n  return (\n    <LabelStyled>\n      {text}\n      <InputStyled\n        type={type}\n        name={name}\n        pattern={pattern}\n        title={title}\n        autoFocus={autoFocus}\n      />\n    </LabelStyled>\n  );\n};\n\nInput.propTypes = {\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  pattern: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  autoFocus: PropTypes.bool,\n};\n","import PropTypes from 'prop-types';\nimport { Button } from '../Button/Button';\nimport { FormStyled } from './Form.styled';\nimport { Input } from '../Input/Input';\n\nexport const Form = ({ params1, params2, onSubmit, autoComplete }) => {\n  const {\n    text1,\n    type1,\n    name1,\n    pattern1,\n    title1,\n    text2,\n    type2,\n    name2,\n    pattern2,\n    title2,\n    buttonText,\n  } = params1;\n  return (\n    <FormStyled onSubmit={onSubmit} autoComplete={autoComplete}>\n      <Input\n        text={text1}\n        type={type1}\n        name={name1}\n        pattern={pattern1}\n        title={title1}\n        autoFocus={true}\n      />\n      <Input\n        text={text2}\n        type={type2}\n        name={name2}\n        pattern={pattern2}\n        title={title2}\n      />\n      {params2 && (\n        <Input\n          text={params2.text}\n          type={params2.type}\n          name={params2.name}\n          pattern={params2.pattern}\n          title={params2.title}\n        />\n      )}\n      <Button>{buttonText}</Button>\n    </FormStyled>\n  );\n};\nForm.propTypes = {\n  params1: PropTypes.shape({\n    text1: PropTypes.string.isRequired,\n    type1: PropTypes.string.isRequired,\n    name1: PropTypes.string.isRequired,\n    pattern1: PropTypes.string.isRequired,\n    title1: PropTypes.string.isRequired,\n    text2: PropTypes.string.isRequired,\n    type2: PropTypes.string.isRequired,\n    name2: PropTypes.string.isRequired,\n    pattern2: PropTypes.string.isRequired,\n    title2: PropTypes.string.isRequired,\n    buttonText: PropTypes.string.isRequired,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  autoComplete: PropTypes.string,\n  params2: PropTypes.shape({\n    text: PropTypes.string,\n    type: PropTypes.string,\n    name: PropTypes.string,\n    pattern: PropTypes.string,\n    title: PropTypes.string,\n  }),\n};\n","import { Form } from 'components/Form/Form';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth';\nconst params1 = {\n  text1: 'Email',\n  type1: 'email',\n  name1: 'loginEmail',\n  pattern1:\n    '^[\\\\w]{1,}[\\\\w.+-]{0,}@[\\\\w-]{2,}([.][a-zA-Z]{2,}|[.][\\\\w-]{2,}[.][a-zA-Z]{2,})$',\n  title1: 'Invalid email address',\n  text2: 'Password',\n  type2: 'password',\n  name2: 'loginPassword',\n  pattern2: '[^ ].{2,12}$',\n  title2:\n    'The password must contain: At least 1 Uppercase At least 1 Lowercase At least 1 Number At least 1 Symbol, symbol allowed --> !@#$%^&*_=+- Min 8 chars and Max 12 chars',\n  buttonText: 'login',\n};\n\nconst LoginView = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      login({\n        email: form.elements.loginEmail.value,\n        password: form.elements.loginPassword.value,\n      })\n    );\n    form.reset();\n  };\n  return (\n    <main>\n      <Form params1={params1} onSubmit={handleSubmit} autoComplete=\"on\" />\n    </main>\n  );\n};\n\nexport default LoginView;\n"],"names":["FormStyled","styled","autocomplete","autoComplete","LabelStyled","InputStyled","required","autoFocus","Input","text","type","name","pattern","title","Form","params1","params2","onSubmit","text1","type1","name1","pattern1","title1","text2","type2","name2","pattern2","title2","buttonText","Button","dispatch","useDispatch","e","preventDefault","form","currentTarget","login","email","elements","loginEmail","value","password","loginPassword","reset"],"sourceRoot":""}